# Instances in <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211226%20Swift%20Programming%20Language">{{c1::Swift}}</a>
<a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211429%20Object%20Types%20-%20Swift">{{c1::Object types}}</a> have an important feature in common: they can be {{c2::instantiated}}. 
## Definition
When you declare an object type, you are only defining a *type*. To instantiate a type is to make a thing - an instance - of that type.
## Example
We can declare a dog type of object in the following manner: 
<div style = "border: 2px solid black; margin: 10px; padding: 0px 20px 0px 20px"><pre><code class="Swift">class Dog {</code><code class="Swift">	func bark() {</code><code class="Swift">		print("woof")</code><code class="Swift">	}</code><code class="Swift">	var name = ""</code><code class="Swift">}</code></pre></div>
However, in the above segment, we do not have a dog object. What do have is a type. It shows what a <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Dog</label> object would be like if we have one. To make a <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Dog</label> instance, we need to: 
<div style = "border: 2px solid black; margin: 10px; padding: 0px 20px 0px 20px"><pre><code class="Swift">let fido = Dog()</code></pre></div>
Not the parentheses here. {{c1::We append parentheses to the name of an object type to send a message to that object type, asking it to instantiate itself.}}
Now, after we have instantiated a <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Dog</label> instance, we are able to call its <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211454%20Property%20-%20Swift">{{c1::properties}}</a> and <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211455%20Method%20-%20Swift">{{c2::methods}}</a>:
<div style = "border: 2px solid black; margin: 10px; padding: 0px 20px 0px 20px"><pre><code class="Swift">fido.name = "Fido"</code><code class="Swift">fido.bark() // output: woof</code></pre></div>
## Important Note
By default, <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211454%20Property%20-%20Swift">{{c1::properties}}</a> and <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211455%20Method%20-%20Swift">{{c2::methods}}</a> are *instance* properties and methods, meaning that you {{c3::CANNOT}} use them as messages to the object type itself. You have to have an instance to send those messages to.
<div style = "border: 2px solid black; margin: 10px; padding: 0px 20px 0px 20px"><pre><code class="Swift">Dog.bark() // compile error</code></pre></div>
It is possible to declare a function bark in such a way that saying <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Dog.bark()</label> is legal, but that would be a {{c1::different}} kind of function: {{c2::a class function or a static function}}, and you would need to say so when you declare it. 
## Why Instances?
Given that an <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211429%20Object%20Types%20-%20Swift">{{c1::object type}}</a> itself is an object, why do we need instances?
- We use <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211429%20Object%20Types%20-%20Swift">{{c1::object types}}</a> to define the type of objects, and then we could instantiate different objects that conform to that specific object type. 
- We could have an <a href = "obsidian://open?vault=Knowledge%20Base&file=2%20-%20ZTK%20Knowledge%20Base%2F202012211429%20Object%20Types%20-%20Swift">{{c1::object type}}</a> <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Dog</label>, and then we could have different objects that are typed <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Dog</label>, such as <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">dog1</label>, <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">dog2</label>, <label style = "border: 2px solid gray; margin: 5px; padding: 5px; border-radius: 5px; text-color: #DDDDDD;">Michael</label>...
{{c1::Essentially,}} an instance is {{c2::both code and data}}. The code is from its type and shared with other instances of the same type, but the data is of its own.
